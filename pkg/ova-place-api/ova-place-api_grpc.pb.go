// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_place_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OvaPlaceApiV1Client is the client API for OvaPlaceApiV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OvaPlaceApiV1Client interface {
	CreatePlaceV1(ctx context.Context, in *CreatePlaceRequestV1, opts ...grpc.CallOption) (*PlaceV1, error)
	DescribePlaceV1(ctx context.Context, in *DescribePlaceRequestV1, opts ...grpc.CallOption) (*PlaceV1, error)
	ListPlacesV1(ctx context.Context, in *ListPlacesRequestV1, opts ...grpc.CallOption) (*ListPlacesResponseV1, error)
	UpdatePlaceV1(ctx context.Context, in *UpdatePlaceRequestV1, opts ...grpc.CallOption) (*PlaceV1, error)
	RemovePlaceV1(ctx context.Context, in *RemovePlaceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ovaPlaceApiV1Client struct {
	cc grpc.ClientConnInterface
}

func NewOvaPlaceApiV1Client(cc grpc.ClientConnInterface) OvaPlaceApiV1Client {
	return &ovaPlaceApiV1Client{cc}
}

func (c *ovaPlaceApiV1Client) CreatePlaceV1(ctx context.Context, in *CreatePlaceRequestV1, opts ...grpc.CallOption) (*PlaceV1, error) {
	out := new(PlaceV1)
	err := c.cc.Invoke(ctx, "/ova.place.api.OvaPlaceApiV1/CreatePlaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaPlaceApiV1Client) DescribePlaceV1(ctx context.Context, in *DescribePlaceRequestV1, opts ...grpc.CallOption) (*PlaceV1, error) {
	out := new(PlaceV1)
	err := c.cc.Invoke(ctx, "/ova.place.api.OvaPlaceApiV1/DescribePlaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaPlaceApiV1Client) ListPlacesV1(ctx context.Context, in *ListPlacesRequestV1, opts ...grpc.CallOption) (*ListPlacesResponseV1, error) {
	out := new(ListPlacesResponseV1)
	err := c.cc.Invoke(ctx, "/ova.place.api.OvaPlaceApiV1/ListPlacesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaPlaceApiV1Client) UpdatePlaceV1(ctx context.Context, in *UpdatePlaceRequestV1, opts ...grpc.CallOption) (*PlaceV1, error) {
	out := new(PlaceV1)
	err := c.cc.Invoke(ctx, "/ova.place.api.OvaPlaceApiV1/UpdatePlaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ovaPlaceApiV1Client) RemovePlaceV1(ctx context.Context, in *RemovePlaceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.place.api.OvaPlaceApiV1/RemovePlaceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OvaPlaceApiV1Server is the server API for OvaPlaceApiV1 service.
// All implementations must embed UnimplementedOvaPlaceApiV1Server
// for forward compatibility
type OvaPlaceApiV1Server interface {
	CreatePlaceV1(context.Context, *CreatePlaceRequestV1) (*PlaceV1, error)
	DescribePlaceV1(context.Context, *DescribePlaceRequestV1) (*PlaceV1, error)
	ListPlacesV1(context.Context, *ListPlacesRequestV1) (*ListPlacesResponseV1, error)
	UpdatePlaceV1(context.Context, *UpdatePlaceRequestV1) (*PlaceV1, error)
	RemovePlaceV1(context.Context, *RemovePlaceRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedOvaPlaceApiV1Server()
}

// UnimplementedOvaPlaceApiV1Server must be embedded to have forward compatible implementations.
type UnimplementedOvaPlaceApiV1Server struct {
}

func (UnimplementedOvaPlaceApiV1Server) CreatePlaceV1(context.Context, *CreatePlaceRequestV1) (*PlaceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaceV1 not implemented")
}
func (UnimplementedOvaPlaceApiV1Server) DescribePlaceV1(context.Context, *DescribePlaceRequestV1) (*PlaceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePlaceV1 not implemented")
}
func (UnimplementedOvaPlaceApiV1Server) ListPlacesV1(context.Context, *ListPlacesRequestV1) (*ListPlacesResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlacesV1 not implemented")
}
func (UnimplementedOvaPlaceApiV1Server) UpdatePlaceV1(context.Context, *UpdatePlaceRequestV1) (*PlaceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaceV1 not implemented")
}
func (UnimplementedOvaPlaceApiV1Server) RemovePlaceV1(context.Context, *RemovePlaceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlaceV1 not implemented")
}
func (UnimplementedOvaPlaceApiV1Server) mustEmbedUnimplementedOvaPlaceApiV1Server() {}

// UnsafeOvaPlaceApiV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OvaPlaceApiV1Server will
// result in compilation errors.
type UnsafeOvaPlaceApiV1Server interface {
	mustEmbedUnimplementedOvaPlaceApiV1Server()
}

func RegisterOvaPlaceApiV1Server(s grpc.ServiceRegistrar, srv OvaPlaceApiV1Server) {
	s.RegisterService(&OvaPlaceApiV1_ServiceDesc, srv)
}

func _OvaPlaceApiV1_CreatePlaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaPlaceApiV1Server).CreatePlaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.place.api.OvaPlaceApiV1/CreatePlaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaPlaceApiV1Server).CreatePlaceV1(ctx, req.(*CreatePlaceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaPlaceApiV1_DescribePlaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePlaceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaPlaceApiV1Server).DescribePlaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.place.api.OvaPlaceApiV1/DescribePlaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaPlaceApiV1Server).DescribePlaceV1(ctx, req.(*DescribePlaceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaPlaceApiV1_ListPlacesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlacesRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaPlaceApiV1Server).ListPlacesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.place.api.OvaPlaceApiV1/ListPlacesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaPlaceApiV1Server).ListPlacesV1(ctx, req.(*ListPlacesRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaPlaceApiV1_UpdatePlaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaPlaceApiV1Server).UpdatePlaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.place.api.OvaPlaceApiV1/UpdatePlaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaPlaceApiV1Server).UpdatePlaceV1(ctx, req.(*UpdatePlaceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvaPlaceApiV1_RemovePlaceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlaceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvaPlaceApiV1Server).RemovePlaceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.place.api.OvaPlaceApiV1/RemovePlaceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvaPlaceApiV1Server).RemovePlaceV1(ctx, req.(*RemovePlaceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// OvaPlaceApiV1_ServiceDesc is the grpc.ServiceDesc for OvaPlaceApiV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OvaPlaceApiV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.place.api.OvaPlaceApiV1",
	HandlerType: (*OvaPlaceApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaceV1",
			Handler:    _OvaPlaceApiV1_CreatePlaceV1_Handler,
		},
		{
			MethodName: "DescribePlaceV1",
			Handler:    _OvaPlaceApiV1_DescribePlaceV1_Handler,
		},
		{
			MethodName: "ListPlacesV1",
			Handler:    _OvaPlaceApiV1_ListPlacesV1_Handler,
		},
		{
			MethodName: "UpdatePlaceV1",
			Handler:    _OvaPlaceApiV1_UpdatePlaceV1_Handler,
		},
		{
			MethodName: "RemovePlaceV1",
			Handler:    _OvaPlaceApiV1_RemovePlaceV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ova-place-api.proto",
}
