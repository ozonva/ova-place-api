// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ova-place-api.proto

package ova_place_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePlaceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePlaceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreatePlaceRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetSeat()); l < 1 || l > 255 {
		return CreatePlaceRequestV1ValidationError{
			field:  "Seat",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetMemo()); l < 1 || l > 255 {
		return CreatePlaceRequestV1ValidationError{
			field:  "Memo",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	return nil
}

// CreatePlaceRequestV1ValidationError is the validation error returned by
// CreatePlaceRequestV1.Validate if the designated constraints aren't met.
type CreatePlaceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaceRequestV1ValidationError) ErrorName() string {
	return "CreatePlaceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaceRequestV1ValidationError{}

// Validate checks the field values on DescribePlaceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePlaceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPlaceId() <= 0 {
		return DescribePlaceRequestV1ValidationError{
			field:  "PlaceId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribePlaceRequestV1ValidationError is the validation error returned by
// DescribePlaceRequestV1.Validate if the designated constraints aren't met.
type DescribePlaceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePlaceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePlaceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePlaceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePlaceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePlaceRequestV1ValidationError) ErrorName() string {
	return "DescribePlaceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePlaceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePlaceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePlaceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePlaceRequestV1ValidationError{}

// Validate checks the field values on ListPlacesRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPlacesRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPage() <= 0 {
		return ListPlacesRequestV1ValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	if m.GetPerPage() <= 0 {
		return ListPlacesRequestV1ValidationError{
			field:  "PerPage",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ListPlacesRequestV1ValidationError is the validation error returned by
// ListPlacesRequestV1.Validate if the designated constraints aren't met.
type ListPlacesRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlacesRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlacesRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlacesRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlacesRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlacesRequestV1ValidationError) ErrorName() string {
	return "ListPlacesRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlacesRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlacesRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlacesRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlacesRequestV1ValidationError{}

// Validate checks the field values on ListPlacesResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPlacesResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPlaces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlacesResponseV1ValidationError{
					field:  fmt.Sprintf("Places[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPlacesResponseV1ValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPlacesResponseV1ValidationError is the validation error returned by
// ListPlacesResponseV1.Validate if the designated constraints aren't met.
type ListPlacesResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlacesResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlacesResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlacesResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlacesResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlacesResponseV1ValidationError) ErrorName() string {
	return "ListPlacesResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlacesResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlacesResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlacesResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlacesResponseV1ValidationError{}

// Validate checks the field values on UpdatePlaceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePlaceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPlaceId() <= 0 {
		return UpdatePlaceRequestV1ValidationError{
			field:  "PlaceId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return UpdatePlaceRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetSeat()); l < 1 || l > 255 {
		return UpdatePlaceRequestV1ValidationError{
			field:  "Seat",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetMemo()); l < 1 || l > 255 {
		return UpdatePlaceRequestV1ValidationError{
			field:  "Memo",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	return nil
}

// UpdatePlaceRequestV1ValidationError is the validation error returned by
// UpdatePlaceRequestV1.Validate if the designated constraints aren't met.
type UpdatePlaceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlaceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlaceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlaceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlaceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlaceRequestV1ValidationError) ErrorName() string {
	return "UpdatePlaceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlaceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlaceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlaceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlaceRequestV1ValidationError{}

// Validate checks the field values on RemovePlaceRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePlaceRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPlaceId() <= 0 {
		return RemovePlaceRequestV1ValidationError{
			field:  "PlaceId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemovePlaceRequestV1ValidationError is the validation error returned by
// RemovePlaceRequestV1.Validate if the designated constraints aren't met.
type RemovePlaceRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePlaceRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePlaceRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePlaceRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePlaceRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePlaceRequestV1ValidationError) ErrorName() string {
	return "RemovePlaceRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePlaceRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePlaceRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePlaceRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePlaceRequestV1ValidationError{}

// Validate checks the field values on PlaceV1 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PlaceV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PlaceId

	// no validation rules for UserId

	// no validation rules for Seat

	// no validation rules for Memo

	return nil
}

// PlaceV1ValidationError is the validation error returned by PlaceV1.Validate
// if the designated constraints aren't met.
type PlaceV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlaceV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlaceV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlaceV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlaceV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlaceV1ValidationError) ErrorName() string { return "PlaceV1ValidationError" }

// Error satisfies the builtin error interface
func (e PlaceV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlaceV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlaceV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlaceV1ValidationError{}

// Validate checks the field values on PaginationV1 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaginationV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for PerPage

	// no validation rules for Total

	return nil
}

// PaginationV1ValidationError is the validation error returned by
// PaginationV1.Validate if the designated constraints aren't met.
type PaginationV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationV1ValidationError) ErrorName() string { return "PaginationV1ValidationError" }

// Error satisfies the builtin error interface
func (e PaginationV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationV1ValidationError{}

// Validate checks the field values on EmptyV1 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmptyV1) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyV1ValidationError is the validation error returned by EmptyV1.Validate
// if the designated constraints aren't met.
type EmptyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyV1ValidationError) ErrorName() string { return "EmptyV1ValidationError" }

// Error satisfies the builtin error interface
func (e EmptyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyV1ValidationError{}
